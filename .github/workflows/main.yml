name: Build de imagenes v2.

on:
  push:
    branches:
      - 'master'
  
jobs:
  
  #Sonarcloud:
    # name: Escaneo con Sonarcloud
    # runs-on: ubuntu-latest
    # steps:
    #   - uses: actions/checkout@v3
    #     with:
    #       fetch-depth: 0  
    #   - name: Set up JDK 11
    #     uses: actions/setup-java@v1
    #     with:
    #       java-version: 11
    #   - name: Cache SonarCloud packages
    #     uses: actions/cache@v1
    #     with:
    #       path: ~/.sonar/cache
    #       key: ${{ runner.os }}-sonar
    #       restore-keys: ${{ runner.os }}-sonar
    #   - name: Cache Maven packages
    #     uses: actions/cache@v1
    #     with:
    #       path: ~/.m2
    #       key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
    #       restore-keys: ${{ runner.os }}-m2
    #   - name: Build and analyze
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
    #       SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
    #     run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=ignaciomontero2022_products-service-example

  build_imagen_a_container:
    name: Buildeo de imagen, test y publicaci√≥n a Docker Hub.
    #needs: Sonar
    runs-on: ubuntu-latest
    steps:
    - name: Checkout del codigo
      uses: actions/checkout@v3
    - name: Setup del JDK.
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: Build con Mave.
      run: mvn -B package --file pom.xml

    - name: Login a Docker Hub  
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and export to Docker
      uses: docker/build-push-action@v3
      with:
        context: .
        load: true
        build-args: |
          JAR_FILE=target/products-service-example-0.0.1-SNAPSHOT-spring-boot.jar
        tags: ignaciomontero2022/products-service-example:${{ github.sha }}

    - name: Levanto docker
      run: |
        docker run -d --name products-service-example -p 8080:8080 ignaciomontero2022/products-service-example:${{ github.sha }}
        sleep 30
        curl -o - -I --location --request GET '127.0.0.1:8080/products/123'

    - name: Chequeo de microservicio en container.
      run: |
        curl -o - -I --location --request GET '127.0.0.1:8080/products/123'


    # - name: Chequeo si microservicio levanto y contesta
    #   uses: lakuapik/gh-actions-http-status@v1
    #   with:
    #     sites: '["http://127.0.0.1:8080/products/123"]'
    #     expected: '[200]'
    
    
    #   curl --location --request GET '127.0.0.1:8080/products/123'
    # - name: Build de products-service-example
    #   uses: docker/build-push-action@v3
    #  with:
    #     context: .
    #     push: true
    #     tags: ignaciomontero2022/orders-service-example:${{ github.sha }}
